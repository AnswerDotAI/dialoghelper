[
  {
    "objectID": "experimental.html",
    "href": "experimental.html",
    "title": "experimental",
    "section": "",
    "text": "source\n\niife\n\n iife (code:str)\n\nWrap javascript code string in an IIFE and execute it via add_html\n\nsource\n\n\nload_screenshot_js\n\n load_screenshot_js (force=False, timeout=5)\n\nLoad screenshot capability and wait for confirmation it’s ready.\n\n# load_screenshot_js()\n\nLoading screenshot.js ...\nScreenshot.js loaded and ready\n\n\n\nsource\n\n\nstart_screen_share\n\n start_screen_share (timeout=45)\n\nStart persistent screen sharing session, waiting for confirmation.\n\n# start_screen_share()\n\n\nsource\n\n\nstop_screen_share\n\n stop_screen_share ()\n\nStop persistent screen sharing session.\n\nsource\n\n\ncapture_screen\n\n capture_screen ()\n\nCapture screenshot, automatically starting screen share if needed.",
    "crumbs": [
      "experimental"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "dialoghelper",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "dialoghelper"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "dialoghelper",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall dialoghelper in Development mode\n# make sure dialoghelper package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to dialoghelper\n$ nbdev_prepare",
    "crumbs": [
      "dialoghelper"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "dialoghelper",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/AnswerDotAI/dialoghelper.git\nor from conda\n$ conda install -c AnswerDotAI dialoghelper\nor from pypi\n$ pip install dialoghelper\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "dialoghelper"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "dialoghelper",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2",
    "crumbs": [
      "dialoghelper"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "dialoghelper",
    "section": "",
    "text": "from fastcore import tools\nsource",
    "crumbs": [
      "dialoghelper"
    ]
  },
  {
    "objectID": "core.html#text-edit",
    "href": "core.html#text-edit",
    "title": "dialoghelper",
    "section": "Text Edit",
    "text": "Text Edit\n\nsource\n\nmsg_insert_line\n\n msg_insert_line (msgid:str, insert_line:int, new_str:str, dname:str='')\n\nInsert text at a specific line number in a message\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmsgid\nstr\n\nMessage id to edit\n\n\ninsert_line\nint\n\nThe line number after which to insert the text (0 for beginning of file)\n\n\nnew_str\nstr\n\nThe text to insert\n\n\ndname\nstr\n\nRunning dialog to get info for; defaults to current dialog\n\n\n\n\nmsg_insert_line(_edit_id, 0, 'This should go to the first line')\nmsg_insert_line(_edit_id, 3, 'This should go to the 4th line')\nmsg_insert_line(_edit_id, 5, 'This should go to the last line')\n\n{'success': 'Inserted text after line 5 in message _65ee1825'}\n\n\n\nprint(read_msg(n=0, msgid=_edit_id, nums=True)['msg']['content'])\n\n     1 │ This should go to the first line\n     2 │ This message should be found.\n     3 │ \n     4 │ This should go to the 4th line\n     5 │ This is a multiline message.\n     6 │ This should go to the last line\n\n\n\nsource\n\n\nmsg_str_replace\n\n msg_str_replace (msgid:str, old_str:str, new_str:str, dname:str='')\n\nReplace first occurrence of old_str with new_str in a message\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmsgid\nstr\n\nMessage id to edit\n\n\nold_str\nstr\n\nText to find and replace\n\n\nnew_str\nstr\n\nText to replace with\n\n\ndname\nstr\n\nRunning dialog to get info for; defaults to current dialog\n\n\n\n\nmsg_str_replace(_edit_id, 'This should go to the first line', 'This should go to the 1st line')\n\n{'success': 'Replaced text in message _65ee1825'}\n\n\n\nprint(read_msg(n=0, msgid=_edit_id, nums=True)['msg']['content'])\n\n     1 │ This should go to the 1st line\n     2 │ This message should be found.\n     3 │ \n     4 │ This should go to the 4th line\n     5 │ This is a multiline message.\n     6 │ This should go to the last line\n\n\n\nsource\n\n\nmsg_strs_replace\n\n msg_strs_replace (msgid:str, old_strs:list[str], new_strs:list[str],\n                   dname:str='')\n\nReplace multiple strings simultaneously in a message\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmsgid\nstr\n\nMessage id to edit\n\n\nold_strs\nlist\n\nList of strings to find and replace\n\n\nnew_strs\nlist\n\nList of replacement strings (must match length of old_strs)\n\n\ndname\nstr\n\nRunning dialog to get info for; defaults to current dialog\n\n\n\n\nmsg_strs_replace(_edit_id, ['This is a multiline message.', 'This should go to the last line'], ['5th line', 'last line'])\n\n{'success': 'Successfully replaced all the strings in message _65ee1825'}\n\n\n\nprint(read_msg(n=0, msgid=_edit_id, nums=True)['msg']['content'])\n\n     1 │ This should go to the 1st line\n     2 │ This message should be found.\n     3 │ \n     4 │ This should go to the 4th line\n     5 │ 5th line\n     6 │ last line\n\n\n\nsource\n\n\nmsg_replace_lines\n\n msg_replace_lines (msgid:str, start_line:int, end_line:int,\n                    new_content:str, dname:str='')\n\nReplace a range of lines with new content in a message\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nmsgid\nstr\n\nMessage id to edit\n\n\nstart_line\nint\n\nStarting line number to replace (1-based indexing)\n\n\nend_line\nint\n\nEnding line number to replace (1-based indexing, inclusive)\n\n\nnew_content\nstr\n\nNew content to replace the specified lines\n\n\ndname\nstr\n\nRunning dialog to get info for; defaults to current dialog\n\n\n\n\nmsg_replace_lines(_edit_id, 2, 4,'line 2\\nline 3\\nline 4\\n')\n\n{'success': 'Replaced lines 2 to 4 in message _65ee1825'}\n\n\n\nprint(read_msg(n=0, msgid=_edit_id, nums=True)['msg']['content'])\n\n     1 │ This should go to the 1st line\n     2 │ line 2\n     3 │ line 3\n     4 │ line 4\n     5 │ 5th line\n     6 │ last line\n\n\n\ndel_msg(_edit_id)",
    "crumbs": [
      "dialoghelper"
    ]
  },
  {
    "objectID": "core.html#gists",
    "href": "core.html#gists",
    "title": "dialoghelper",
    "section": "Gists",
    "text": "Gists\n\nsource\n\nload_gist\n\n load_gist (gist_id:str)\n\nRetrieve a gist\n\ngistid = 'jph00/e7cfd4ded593e8ef6217e78a0131960c'\ngist = load_gist(gistid)\ngist.html_url\n\n'https://gist.github.com/jph00/e7cfd4ded593e8ef6217e78a0131960c'\n\n\n\nsource\n\n\ngist_file\n\n gist_file (gist_id:str)\n\nGet the first file from a gist\n\ngfile = gist_file(gistid)\nprint(gfile.content[:100]+\"…\")\n\n\"This is a test module which makes some simple tools available.\"\n__all__ = [\"hi\",\"whoami\"]\n\ntestfoo=…\n\n\n\nsource\n\n\nimport_string\n\n import_string (code:str, name:str)\n\n\n\n\n\nType\nDetails\n\n\n\n\ncode\nstr\nCode to import as a module\n\n\nname\nstr\nName of module to create\n\n\n\n\nsource\n\n\nis_usable_tool\n\n is_usable_tool (func:&lt;built-infunctioncallable&gt;)\n\nTrue if the function has a docstring and all parameters have types, meaning that it can be used as an LLM tool.\n\ndef hi(who:str):\n    \"Say hi to `who`\"\n    return f\"Hello {who}\"\n\ndef hi2(who):\n    \"Say hi to `who`\"\n    return f\"Hello {who}\"\n\ndef hi3(who:str):\n    return f\"Hello {who}\"\n\nbye = \"bye\"\n\n\nassert is_usable_tool(hi)\nassert not is_usable_tool(hi2)\nassert not is_usable_tool(hi3)\nassert not is_usable_tool(bye)\n\n\nsource\n\n\nmk_toollist\n\n mk_toollist (syms)\n\n\nMarkdown(mk_toollist([hi]))\n\n\n&hi: Say hi to who\n\n\n\n\nsource\n\n\nimport_gist\n\n import_gist (gist_id:str, mod_name:str=None, add_global:bool=True,\n              import_wildcard:bool=False, create_msg:bool=False)\n\nImport gist directly from string without saving to disk\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngist_id\nstr\n\nuser/id or just id of gist to import as a module\n\n\nmod_name\nstr\nNone\nmodule name to create (taken from gist filename if not passed)\n\n\nadd_global\nbool\nTrue\nadd module to caller’s globals?\n\n\nimport_wildcard\nbool\nFalse\nimport all exported symbols to caller’s globals\n\n\ncreate_msg\nbool\nFalse\nAdd a message that lists usable tools\n\n\n\n\nimport_gist(gistid)\nimporttest.testfoo\n\n'testbar'\n\n\n\nimport_gist.__doc__\n\n'Import gist directly from string without saving to disk'\n\n\n\nimport_gist(gistid, import_wildcard=True)\nimporttest.testfoo\n\n'testbar'\n\n\n\nhi(\"Sarah\")\n\n'Hello Sarah'\n\n\n\nimporttest.__all__\n\n['hi', 'whoami']",
    "crumbs": [
      "dialoghelper"
    ]
  },
  {
    "objectID": "core.html#tool-info",
    "href": "core.html#tool-info",
    "title": "dialoghelper",
    "section": "Tool info",
    "text": "Tool info\nThis is how we get a superset of tools to include:\n\nsource\n\ntool_info\n\n tool_info ()\n\n\nfrom dialoghelper.core import __all__ as _all\n\n\nsource\n\n\nfc_tool_info\n\n fc_tool_info ()\n\n\nfor o in _all:\n    s = globals()[o]\n    print(o)\n    if not hasattr(s, '__name__') or s.__name__[0]=='_' or not s.__doc__: continue\n    print(f'- &`{s.__name__}`: {s.__doc__}')\n\ndh_settings\nPlacements\nempty\nfind_var\n- &`find_var`: Search for var in all frames of the call stack\nset_var\n- &`set_var`: Set var to val after finding it in all frames of the call stack\ncall_endp\nfind_dname\n- &`find_dname`: Get the message id by searching the call stack for __dialog_id.\nfind_msg_id\n- &`find_msg_id`: Get the message id by searching the call stack for __dialog_id.\ncurr_dialog\n- &`curr_dialog`: Get the current dialog info.\nfind_msgs\n- &`find_msgs`: Find `list[dict]` of messages in current specific dialog that contain the given information. To refer to a message found later, use its `id` field.\nmsg_idx\n- &`msg_idx`: Get absolute index of message in dialog.\nadd_html\n- &`add_html`: Send HTML to the browser to be swapped into the DOM\nadd_msg\n- &`add_msg`: Add/update a message to the queue to show after code execution completes.\ndel_msg\n- &`del_msg`: Delete a message from the dialog.\nupdate_msg\n- &`update_msg`: Update an existing message. Provide either `msg` OR field key/values to update.\n    Use `content` param to update contents.\n    Only include parameters to update--missing ones will be left unchanged.\nurl2note\n- &`url2note`: Read URL as markdown, and add a note below current message with the result\nast_py\n- &`ast_py`: Get an SgRoot root node for python `code`\nast_grep\n- &`ast_grep`: Use the `ast-grep` command to find `pattern` in `path`\nread_msg\n- &`read_msg`: Get the `Message` object indexed in the current dialog.\nrun_msg\n- &`run_msg`: Adds a message to the run queue. Use read_msg to see the output once it runs.\nmsg_insert_line\n- &`msg_insert_line`: Insert text at a specific line number in a message\nmsg_str_replace\n- &`msg_str_replace`: Replace first occurrence of old_str with new_str in a message\nmsg_strs_replace\n- &`msg_strs_replace`: Replace multiple strings simultaneously in a message\nmsg_replace_lines\n- &`msg_replace_lines`: Replace a range of lines with new content in a message\nload_gist\n- &`load_gist`: Retrieve a gist\ngist_file\n- &`gist_file`: Get the first file from a gist\nimport_string\nis_usable_tool\n- &`is_usable_tool`: True if the function has a docstring and all parameters have types, meaning that it can be used as an LLM tool.\nmk_toollist\nimport_gist\n- &`import_gist`: Import gist directly from string without saving to disk\ntool_info\nfc_tool_info\n\n\n\nfor o in tools.__all__:\n    s = getattr(tools, o)\n    print(f'- &`{s.__name__}`: {s.__doc__}')\n\n- &`run_cmd`: Run `cmd` passing split `argstr`, optionally checking for allowed argstr\n- &`rg`: Run the `rg` command with the args in `argstr` (no need to backslash escape)\n- &`sed`: Run the `sed` command with the args in `argstr` (e.g for reading a section of a file)\n- &`view`: View directory or file contents with optional line range and numbers\n- &`create`: Creates a new file with the given content at the specified path\n- &`insert`: Insert new_str at specified line number\n- &`str_replace`: Replace first occurrence of old_str with new_str in file\n- &`strs_replace`: Replace for each str pair in old_strs,new_strs\n- &`replace_lines`: Replace lines in file using start and end line-numbers (index starting at 1)",
    "crumbs": [
      "dialoghelper"
    ]
  }
]